# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GTFSagencySelect
                                 A QGIS plugin
 You can choose one or more public transport agencies for routing them in OSM 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Luigi
        email                : luigi.dalbosco@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QListWidgetItem

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .GTFSagency_selection_dialog import GTFSagencySelectDialog
import os.path

import pandas as pd
from collections import defaultdict
import os

class GTFSagencySelect:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor."""
        self.GTFSagency_selection_dialog = GTFSagencySelectDialog()
        """
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GTFSagencySelect_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GTFS agency selection')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GTFSagencySelect', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/GTFSagency_selection/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'0. GTFS agency.ies selection'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        self.GTFSagency_selection_dialog.updateAgenciesButton.clicked.connect(self.__updateAgences)

    def __updateAgences(self):
        self.GTFSagency_selection_dialog.listAgenciesWidget.clear()  # Clear existing items
        dwnldfld = self.GTFSagency_selection_dialog.downloadDirFileWidget.filePath()
        agency = pd.read_csv(str(dwnldfld)+'/agency.txt',dtype='str')
        i_row = 0 
        while i_row < len(agency):
            agency.loc[i_row,'id_name'] = str(agency.loc[i_row,'agency_id'])+' - '+str(agency.loc[i_row,'agency_name'])
            i_row += 1
        agency = agency.sort_values(by='agency_name')
        ls_agency = agency.id_name.unique()
        for agen in ls_agency:
            self.GTFSagency_selection_dialog.listAgenciesWidget.addItem(QListWidgetItem(str(agen)))

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GTFS agency selection'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        
        
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            

        # show the dialog
        self.GTFSagency_selection_dialog.show()
        # Run the dialog event loop
        result = self.GTFSagency_selection_dialog.exec_()
        # See if OK was pressed

        dwnldfld = self.GTFSagency_selection_dialog.downloadDirFileWidget.filePath()

        selected_items = self.GTFSagency_selection_dialog.listAgenciesWidget.selectedItems()

        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            ls_agencies_selected = [item.text() for item in selected_items]
            print('you selected:')
            for agen in ls_agencies_selected:
                print(agen)

            agency_txt = str(dwnldfld)+'/agency.txt'
            routes_txt = str(dwnldfld)+'/routes.txt'
            trips_txt = str(dwnldfld)+'/trips.txt'
            stop_times_txt =str(dwnldfld)+'/stop_times.txt'
            stops_txt =str(dwnldfld)+'/stops.txt'

            agency = pd.read_csv(agency_txt, dtype={'agency_id':'str'})
            routes = pd.read_csv(routes_txt,dtype='str')
            trips = pd.read_csv(trips_txt,dtype='str')
            types = defaultdict(lambda: str, stop_sequence="int")
            stop_times = pd.read_csv(stop_times_txt,dtype=types)
            types = defaultdict(lambda: str, stop_lon="float", stop_lat="float")
            stops = pd.read_csv(stops_txt,dtype =types)

            agencies_num = []

            for agen in ls_agencies_selected:
                oneagen = agen.split(' - ')[0]
                agencies_num.append(str(oneagen))

            name_fld='agen'
            for agen in agencies_num:
                name_fld = str(name_fld)+'_'+str(agen)

            agency_fld = os.path.join(dwnldfld,name_fld)

            if not os.path.exists(agency_fld):
                os.makedirs(agency_fld)

            agency_select = pd.DataFrame()

            for agen in agencies_num:
                agencies = agency[agency['agency_id'] == agen]
                agency_select = pd.concat([agency_select,agencies],ignore_index=True)

            agency_select.to_csv(str(agency_fld)+'/agency.txt', index=False)

            agency_routes = routes[routes.agency_id.isin(agencies_num)]
            
            agency_routes.to_csv(str(agency_fld)+'/routes.txt', index=False)

            ls_routes = agency_routes.route_id.unique()

            trips_agency = trips[trips.route_id.isin(ls_routes)]

            trips_agency.to_csv(str(agency_fld)+'/trips.txt', index=False)

            ls_trips = trips_agency.trip_id.unique()

            agency_stop_times = stop_times[stop_times.trip_id.isin(ls_trips)]

            agency_stop_times.to_csv(str(agency_fld)+'/stop_times.txt', index=False)

            ls_stops = agency_stop_times.stop_id.unique()

            agency_stops = stops[stops.stop_id.isin(ls_stops)]

            agency_stops.to_csv(str(agency_fld)+'/stops.txt', index=False)

       
